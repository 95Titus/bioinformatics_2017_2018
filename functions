#!/bin/bash


# Show the grade, from the number of points
# @param $1: n_points
# @return Nothing
function show_grade {
  n_points=$1
  echo "n_points: "$n_points
  if [[ n_points < 1 ]]; then $n_points=$((n_points+1)); fi
  echo "n_points (after correcting for minumum): "$n_points
  echo "Grade: "$n_points
}

# Show the grade, from the number of points
# @param $1: username
# @param $2: reponame
# @return 1 if pass, 0 if fails
function pass_build {
  pass=`travis status --repo $1/$2 --no-interactive 2>/dev/null | egrep "passed" | wc --words | cut -f 1 -d " "`
  echo $pass
}

# Does the user's repo has a .travis.yml?
# @param $1: username
# @param $2: reponame
# @return 1 if pass, 0 if fails
function has_travis {
  username=$1
  reponame=$2
  wget -q https://github.com/$username/$reponame/blob/master/.travis.yml -O /dev/null
  exit_code=$?
  if [[ $exit_code == 0 ]] ;
  then
    echo "1"
  else
    echo "0"
  fi
}

# Does the user's repo has a README.md?
# @param $1: username
# @param $2: reponame
# @return 1 if pass, 0 if fails
function has_readme {
  username=$1
  reponame=$2
  wget -q https://github.com/$username/$reponame/blob/master/README.md -O /dev/null
  exit_code=$?
  if [[ $exit_code == 0 ]] ;
  then
    echo "1"
  else
    echo "0"
  fi
}

# Does the user's repo has a README.md with a picture?
# @param $1: username
# @param $2: reponame
# @return 1 if pass, 0 if fails
function has_readme_with_picture {
  username=$1
  reponame=$2

  if [[ `has_readme $username $reponame` != 1 ]] ;
  then
    echo "0"
    return
  fi 
  wget -q https://raw.githubusercontent.com/$username/$reponame/master/README.md -O tmp.txt

  n_pics=`egrep "\!\[.*\]\(.*\.(png|jpg|jpeg|gif)\)" tmp.txt | wc --lines | cut -f 1 -d " "`

  rm tmp.txt

  if [[ $n_pics == 0 ]] ;
  then
    echo "0"
  else
    echo "1"
  fi
}

# Does the user's repo has a README.md with a presentation?
# @param $1: username
# @param $2: reponame
# @return 1 if pass, 0 if fails
function has_readme_with_presentation {
  username=$1
  reponame=$2

  if [[ `has_readme $username $reponame` != 1 ]] ;
  then
    echo "0"
    return
  fi 
  wget -q https://raw.githubusercontent.com/$username/$reponame/master/README.md -O tmp.txt

  n_presentations=`egrep "\[.*\]\(.*\.(pdf|ppt|pptx|doc|docx)\)" tmp.txt | wc --lines | cut -f 1 -d " "`

  rm tmp.txt

  if [[ $n_presentations == 0 ]] ;
  then
    echo "0"
  else
    echo "1"
  fi
}

# Does the user's repo have a .travis.yml with proselint?
# @param $1: username
# @param $2: reponame
# @return 1 if pass, 0 if fails
function has_travis_with_proselint {
  username=$1
  reponame=$2

  if [[ `has_travis $username $reponame` != 1 ]] ;
  then
    echo "0"
    return
  fi 
  wget -q https://raw.githubusercontent.com/$username/$reponame/master/.travis.yml -O tmp.txt

  n_lines=`egrep "proselint" tmp.txt | wc --lines | cut -f 1 -d " "`

  rm tmp.txt

  if [[ $n_lines == 0 ]] ;
  then
    echo "0"
  else
    echo "1"
  fi
}




# Does the user's repo have a .travis.yml that checks dead links?
# @param $1: username
# @param $2: reponame
# @return 1 if pass, 0 if fails
function has_travis_find_find_dead_links {
  username=$1
  reponame=$2

  if [[ `has_travis $username $reponame` != 1 ]] ;
  then
    echo "0"
    return
  fi 
  wget -q https://raw.githubusercontent.com/$username/$reponame/master/.travis.yml -O tmp.txt

  n_lines=`egrep "markdown-link-check" tmp.txt | wc --lines | cut -f 1 -d " "`

  rm tmp.txt

  if [[ $n_lines == 0 ]] ;
  then
    echo "0"
  else
    echo "1"
  fi
}


# Does the user's repo have a .travis.yml that runs a python script?
# @param $1: username
# @param $2: reponame
# @return 1 if pass, 0 if fails
function has_travis_with_python {
  username=$1
  reponame=$2

  if [[ `has_travis $username $reponame` != 1 ]] ;
  then
    echo "0"
    return
  fi 
  wget -q https://raw.githubusercontent.com/$username/$reponame/master/.travis.yml -O tmp.txt

  n_lines=`egrep "python" tmp.txt | wc --lines | cut -f 1 -d " "`

  rm tmp.txt

  if [[ $n_lines == 0 ]] ;
  then
    echo "0"
  else
    echo "1"
  fi
}


# Get the number of points, for a known user and repo
# @param $1: username
# @param $2: reponame
# @return 1 if pass, 0 if fails
function get_points {

  username=$1
  reponame=$2

  # Start grading

  # 1. Do correct_cpp_scoreboard
  point_one=`pass_build $username correct_cpp_scoreboard`

  # 2. Do correct_cpp_hello
  point_two=`pass_build $username correct_cpp_hello`

  # 3. Have a README.md at repo
  point_three=`has_readme $username $reponame`
  
  # 4. Have a README.md with a picture
  point_four=`has_readme_with_picture $username $reponame`

  # 5. Have a README.md with a presentation
  point_five=`has_readme_with_presentation $username $reponame`

  # 6. Have a .travis.yml with proselint
  point_six=`has_travis_with_proselint $username $reponame`

  # 7. Have a .travis.yml that checks dead links
  point_seven=`has_travis_find_find_dead_links $username $reponame`

  # 8. Have a .travis.yml that runs a Python script
  point_eight=`has_travis_with_python $username $reponame`

  # Show report
  echo >&2 "Report"
  echo >&2 "1: correct_cpp_scoreboard: "$point_one
  echo >&2 "2: correct_cpp_hello: "$point_two
  echo >&2 "3: has README: "$point_three
  echo >&2 "4: has README with picture: "$point_four
  echo >&2 "5: has README with presentation: "$point_five
  echo >&2 "6: has .travis.yml with proselint: "$point_six
  echo >&2 "7: has .travis.yml that checks dead links: "$point_seven
  echo >&2 "8: has .travis.yml that runs a Python script: "$point_eight


  n_points=$((point_one + point_two + point_three + point_four + point_five + point_six + point_seven + point_eight))
  echo $n_points
}

# Get the username from file
# @param $1: filename
# @return the username
function get_username {

  filename=$1

  # No text file results in the grade 1
  if [[ ! -f $filename ]] ; 
  then
    echo "[unknown]"
    return
  fi

  # Username is in the first line, after a whitespace
  username=`cat $filename | head -n 1 | tail -n 1 | cut -d " " -f 2`
  echo $username
}

# Get the reponame from file
# @param $1: filename
# @return the username
function get_reponame {

  filename=$1

  # No text file results in the grade 1
  if [[ ! -f $filename ]] ; 
  then
    echo "[unknown]"
    return
  fi

  # Username is in the first line, after a whitespace
  reponame=`cat $filename | head -n 2 | tail -n 1 | cut -d " " -f 2`
  echo $reponame
}


# Get the grade, after extracing user and repo from file
# @param $1: filename
# @return the grade as a number from 1 to 10
function get_grade {

  filename=$1

  # No text file results in the grade 1
  if [[ ! -f $filename ]] ; 
  then
    # echo >&2 "File '"$filename"' not found"
    echo "1"
    return
  fi

  # Username is in the first line, after a whitespace
  username=`cat $filename | head -n 1 | tail -n 1 | cut -d " " -f 2`

  # Reponame is in the first line, after a whitespace
  reponame=`cat $filename | head -n 2 | tail -n 1 | cut -d " " -f 2`

  # echo >&2 "Username: "$username
  # echo >&2 "Reponame: "$reponame
 
  grade=`get_points $username $reponame`
  if [[ $grade < 1 ]]; 
  then 
    echo "1"; 
  else 
    echo $grade
  fi
}
